/**
 * Copyright 2019  mall 分布式商城
 * <p>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * <p>
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * <p>
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package ${package}.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import ${main}.commons.mybatis.service.impl.BaseServiceImpl;
import ${main}.commons.mybatis.utils.QueryWrapperBuilder;
import ${main}.commons.tools.page.PageData;
import ${main}.commons.tools.constant.Constant;
import ${main}.commons.tools.utils.ConvertUtils;
import ${main}.commons.tools.validator.AssertUtils;
import ${main}.commons.tools.validator.ValidatorUtils;
import ${main}.commons.tools.validator.group.AddGroup;
import ${main}.commons.tools.validator.group.UpdateGroup;
import ${main}.commons.tools.validator.group.DefaultGroup;
import ${package}.dao.${className}Dao;
import ${package}.dto.${className}DTO;
import ${package}.entity.${className}Entity;
import ${package}.redis.${className}Redis;
import ${package}.service.${className}Service;
import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

/**
 * ${comments}
 *
 * @author ${author} ${email}
 * @since ${version} ${date}
 */
@Service
@Log4j2
public class ${className}ServiceImpl extends BaseServiceImpl<${className}Dao, ${className}Entity> implements ${className}Service {

    @Autowired
    private ${className}Redis ${classname}Redis;


    @Override
    public PageData<${className}DTO> page(Map<String, Object> params) {
        IPage<${className}Entity> page = baseDao.selectPage(
                getPage(params, Constant.CREATE_DATE, false),
                getWrapper(params)
        );

        return getPageData(page, ${className}DTO.class);
    }


    @Override
    public List<${className}DTO> list(Map<String, Object> params) {
        List<${className}Entity> entityList = baseDao.selectList(getWrapper(params));

        return ConvertUtils.sourceToTarget(entityList, ${className}DTO.class);
    }


    private QueryWrapper getWrapper(Map<String, Object> params){
        return new QueryWrapperBuilder<${className}Entity>(params)
                .eq("id", "id")
                .build();
    }


    private LambdaQueryWrapper<${className}Entity> getWrapper(Long id) {
        LambdaQueryWrapper<${className}Entity> queryWrapper = new LambdaQueryWrapper<>();
        queryWrapper.eq(id != null, ${className}Entity::getId, id);
        return queryWrapper;
    }


    @Override
    public ${className}DTO get(Long id) {
        ${className}Entity entity = baseDao.selectById(id);

        return ConvertUtils.sourceToTarget(entity, ${className}DTO.class);
    }


    @Override
    @Transactional(rollbackFor = Exception.class)
    public void save(${className}DTO dto) {
        //效验数据
        ValidatorUtils.validateEntity(dto, AddGroup.class, DefaultGroup.class);

        ${className}Entity entity = ConvertUtils.sourceToTarget(dto, ${className}Entity.class);
        insert(entity);
    }


    @Override
    @Transactional(rollbackFor = Exception.class)
    public void update(${className}DTO dto) {
        //效验数据
        ValidatorUtils.validateEntity(dto, UpdateGroup.class, DefaultGroup.class);

        ${className}Entity entity = ConvertUtils.sourceToTarget(dto, ${className}Entity.class);
        updateById(entity);
    }


    @Override
    @Transactional(rollbackFor = Exception.class)
    public void delete(Long[] ids) {
        //效验数据
        AssertUtils.isArrayEmpty(ids, "id");

        //逻辑删除
        //logicDelete(ids, ${className}Entity.class);

        //物理删除(框架层面会统一做逻辑删除)
        baseDao.deleteBatchIds(Arrays.asList(ids));
    }

}