/**
 * Copyright 2019  mall 分布式商城
 * <p>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * <p>
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * <p>
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package ${package}.controller;

import com.mall.commons.tools.constant.Constant;
import ${main}.commons.tools.page.PageData;
import ${main}.commons.tools.utils.ConvertUtils;
import ${main}.commons.tools.utils.ExcelUtils;
import ${main}.commons.tools.utils.Result;
import ${main}.commons.tools.validator.AssertUtils;
import ${main}.commons.tools.validator.ValidatorUtils;
import ${main}.commons.tools.validator.group.AddGroup;
import ${main}.commons.tools.validator.group.UpdateGroup;
import ${main}.commons.tools.validator.group.DefaultGroup;
import ${package}.dto.${className}DTO;
import ${package}.excel.${className}Excel;
import ${package}.service.${className}Service;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import springfox.documentation.annotations.ApiIgnore;

import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Map;


/**
 * ${comments}
 *
 * @author ${author} ${email}
 * @since ${version} ${date}
 */
@RestController
@RequestMapping("${moduleName}/${pathName}")
@Api(tags="${comments}")
public class ${className}Controller {

    @Autowired
    private ${className}Service ${classname}Service;


    @GetMapping("page")
    @ApiOperation("分页")
    @ApiImplicitParams({
        @ApiImplicitParam(name = Constant.PAGE, value = "当前页码，从1开始", paramType = "query", required = true, dataType="int") ,
        @ApiImplicitParam(name = Constant.LIMIT, value = "每页显示记录数", paramType = "query",required = true, dataType="int") ,
        @ApiImplicitParam(name = Constant.ORDER_FIELD, value = "排序字段", paramType = "query", dataType="String") ,
        @ApiImplicitParam(name = Constant.ORDER, value = "排序方式，可选值(asc、desc)", paramType = "query", dataType="String")
    })
    public Result<PageData<${className}DTO>> page(@ApiIgnore @RequestParam Map<String, Object> params){
        PageData<${className}DTO> page = ${classname}Service.page(params);

        return new Result<PageData<${className}DTO>>().ok(page);
    }


    @GetMapping("{id}")
    @ApiOperation("信息")
    public Result<${className}DTO> get(@PathVariable("id") String id){
        ${className}DTO data = ${classname}Service.get(Long.valueOf(id));

        return new Result<${className}DTO>().ok(data);
    }


    @PostMapping
    @ApiOperation("保存")
    public Result save(@RequestBody ${className}DTO dto){
        //效验数据
        ValidatorUtils.validateEntity(dto, AddGroup.class, DefaultGroup.class);

        ${classname}Service.save(dto);

        return new Result();
    }


    @PutMapping
    @ApiOperation("修改")
    public Result update(@RequestBody ${className}DTO dto){
        //效验数据
        ValidatorUtils.validateEntity(dto, UpdateGroup.class, DefaultGroup.class);

        ${classname}Service.update(dto);

        return new Result();
    }


    @DeleteMapping
    @ApiOperation("删除")
    public Result delete(@RequestBody String[] ids){
        //效验数据
        AssertUtils.isArrayEmpty(ids, "id");

        ${classname}Service.delete(ConvertUtils.stringToLong(ids));

        return new Result();
    }


    @GetMapping("export")
    @ApiOperation("导出")
    public void export(@ApiIgnore @RequestParam Map<String, Object> params, HttpServletResponse response) throws Exception {
        List<${className}DTO> list = ${classname}Service.list(params);

        ExcelUtils.exportExcelToTarget(response, null, list, ${className}Excel.class);
    }

}